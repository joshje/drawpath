{"version":3,"file":"drawpath.min.js","sources":["config.js","vec2.js","utils.js","canvas.js","grid.js","point.js","mouse.js","code.js","vector.js","vectors.js","keyboard.js","controls.js","drawpath.js"],"names":[],"mappings":"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","sourcesContent":["define('config',[],function() {\n    return {\n        \"fps\": 30\n    };\n});\n\n","define('vec2',[],function() {\n    var Vector2 = function (x,y) {\n\n        this.x= x || 0;\n        this.y = y || 0;\n\n    };\n\n    Vector2.prototype = {\n\n        reset: function ( x, y ) {\n\n            this.x = x;\n            this.y = y;\n\n            return this;\n\n        },\n\n        toString : function (decPlaces) {\n            decPlaces = decPlaces || 3;\n            var scalar = Math.pow(10,decPlaces);\n            return \"[\" + Math.round (this.x * scalar) / scalar + \", \" + Math.round (this.y * scalar) / scalar + \"]\";\n        },\n\n        clone : function () {\n            return new Vector2(this.x, this.y);\n        },\n\n        copyTo : function (v) {\n            v.x = this.x;\n            v.y = this.y;\n        },\n\n        copyFrom : function (v) {\n            this.x = v.x;\n            this.y = v.y;\n        },\n\n        magnitude : function () {\n            return Math.sqrt((this.x*this.x)+(this.y*this.y));\n        },\n\n        magnitudeSquared : function () {\n            return (this.x*this.x)+(this.y*this.y);\n        },\n\n        normalise : function () {\n\n            var m = this.magnitude();\n\n            this.x = this.x/m;\n            this.y = this.y/m;\n\n            return this;\n        },\n\n        reverse : function () {\n            this.x = -this.x;\n            this.y = -this.y;\n\n            return this;\n        },\n\n        plusEq : function (v) {\n            this.x+=v.x;\n            this.y+=v.y;\n\n            return this;\n        },\n\n        plusNew : function (v) {\n             return new Vector2(this.x+v.x, this.y+v.y);\n        },\n\n        minusEq : function (v) {\n            this.x-=v.x;\n            this.y-=v.y;\n\n            return this;\n        },\n\n        minusNew : function (v) {\n            return new Vector2(this.x-v.x, this.y-v.y);\n        },\n\n        multiplyEq : function (scalar) {\n            this.x*=scalar;\n            this.y*=scalar;\n\n            return this;\n        },\n\n        multiplyNew : function (scalar) {\n            var returnvec = this.clone();\n            return returnvec.multiplyEq(scalar);\n        },\n\n        divideEq : function (scalar) {\n            this.x/=scalar;\n            this.y/=scalar;\n            return this;\n        },\n\n        divideNew : function (scalar) {\n            var returnvec = this.clone();\n            return returnvec.divideEq(scalar);\n        },\n\n        dot : function (v) {\n            return (this.x * v.x) + (this.y * v.y) ;\n        },\n\n        angle : function (useRadians) {\n\n            return Math.atan2(this.y,this.x) * (useRadians ? 1 : Vector2Const.TO_DEGREES);\n\n        },\n\n        rotate : function (angle, useRadians) {\n\n            var cosRY = Math.cos(angle * (useRadians ? 1 : Vector2Const.TO_RADIANS));\n            var sinRY = Math.sin(angle * (useRadians ? 1 : Vector2Const.TO_RADIANS));\n\n            Vector2Const.temp.copyFrom(this);\n\n            this.x= (Vector2Const.temp.x*cosRY)-(Vector2Const.temp.y*sinRY);\n            this.y= (Vector2Const.temp.x*sinRY)+(Vector2Const.temp.y*cosRY);\n\n            return this;\n        },\n\n        equals : function (v) {\n            return((this.x==v.x)&&(this.y==v.y));\n        },\n\n        isCloseTo : function (v, tolerance) {\n            if(this.equals(v)) return true;\n\n            Vector2Const.temp.copyFrom(this);\n            Vector2Const.temp.minusEq(v);\n\n            return(Vector2Const.temp.magnitudeSquared() < tolerance*tolerance);\n        },\n\n        rotateAroundPoint : function (point, angle, useRadians) {\n            Vector2Const.temp.copyFrom(this);\n            Vector2Const.temp.minusEq(point);\n            Vector2Const.temp.rotate(angle, useRadians);\n            Vector2Const.temp.plusEq(point);\n            this.copyFrom(Vector2Const.temp);\n        },\n\n        isMagLessThan : function (distance) {\n            return(this.magnitudeSquared()<distance*distance);\n        },\n\n        isMagGreaterThan : function (distance) {\n            return(this.magnitudeSquared()>distance*distance);\n        },\n\n        floor : function() {\n            this.x = Math.floor(this.x);\n            this.y = Math.floor(this.y);\n\n            return this;\n        },\n\n        round : function() {\n            this.x = Math.round(this.x);\n            this.y = Math.round(this.y);\n\n            return this;\n        }\n\n    };\n\n    var Vector2Const = {\n        TO_DEGREES : 180 / Math.PI,\n        TO_RADIANS : Math.PI / 180,\n        temp : new Vector2()\n    };\n\n    return Vector2;\n});\n\n","define('utils',[],function() {\n    return {\n        createEl: function(name, className) {\n            var el = document.createElement(name);\n            if (className) el.className = className;\n            document.body.appendChild(el);\n\n            return el;\n        },\n\n        hsl: function(h, s, l) {\n            return 'hsl('+h%360+', ' + Math.floor(s)+'%, ' + Math.floor(l) + '%)';\n        },\n\n        withinRect: function(pos1, pos2, width, height) {\n            return (pos1.x >= pos2.x &&\n                pos1.x <= pos2.x + width &&\n                pos1.y >= pos2.y &&\n                pos1.y <= pos2.y + height);\n        }\n    };\n});\n\n","define('canvas',[\n    'vec2',\n    'utils'\n], function(\n    Vector2,\n    utils\n) {\n    var Canvas = function(className) {\n        this.el = utils.createEl('canvas', className);\n\n        this.ctx = this.el.getContext('2d');\n\n        this.clear = function() {\n            this.ctx.clearRect(0, 0, this.width, this.height);\n        };\n\n        this.setCursor = function(cursor) {\n            if (this.cursor !== cursor) {\n                this.cursor = cursor;\n                this.newCursor = cursor;\n            }\n        };\n\n        this.updateCursor = function() {\n            if (this.newCursor) {\n                this.el.style.cursor = this.newCursor;\n                this.newCursor = false;\n            }\n        };\n\n        this.resize = function() {\n            var width = window.innerWidth;\n            var height = window.innerHeight;\n\n            if (width !== this.width || height !== this.height) {\n                this.width = width;\n                this.height = height;\n\n                this.half = new Vector2(this.width, this.height).multiplyEq(0.5).floor();\n\n                this.el.width = this.width;\n                this.el.height = this.height;\n            }\n        };\n\n        this.resize();\n        setInterval(this.resize.bind(this), 200);\n    };\n\n    return new Canvas('drawpath-canvas');\n});\n\n","define('grid',[\n    'vec2',\n    'canvas'\n], function(\n    Vector2,\n    canvas\n) {\n    var ctx = canvas.ctx;\n\n    var Grid = function() {\n        this.spacing = 10;\n        this.pos = new Vector2();\n\n        this.update = function() {\n            this.pos.reset(canvas.half.x - 0.5, canvas.half.y - 0.5);\n        };\n\n        this.render = function() {\n            ctx.save();\n\n            ctx.translate(this.pos.x, this.pos.y);\n\n            ctx.beginPath();\n\n            var i = Math.ceil(canvas.width / this.spacing * 0.5);\n            while (--i) {\n                var x = i * this.spacing;\n                ctx.moveTo(x, -canvas.half.y);\n                ctx.lineTo(x, canvas.half.y);\n                ctx.moveTo(-x, canvas.half.y);\n                ctx.lineTo(-x, -canvas.half.y);\n            }\n\n            i = Math.ceil(canvas.height / this.spacing * 0.5);\n            while (--i) {\n                var y = i * this.spacing;\n                ctx.moveTo(-canvas.half.x, y);\n                ctx.lineTo(canvas.half.x, y);\n                ctx.moveTo(canvas.half.x, -y);\n                ctx.lineTo(-canvas.half.x, -y);\n            }\n\n            ctx.strokeStyle = '#EEE';\n            ctx.lineWidth = 1;\n            ctx.stroke();\n\n            ctx.beginPath();\n            ctx.moveTo(0, -canvas.half.y);\n            ctx.lineTo(0, canvas.half.y);\n            ctx.moveTo(-canvas.half.x, 0);\n            ctx.lineTo(canvas.half.x, 0);\n\n            ctx.strokeStyle = '#CCC';\n            ctx.stroke();\n\n            ctx.restore();\n        };\n\n    };\n\n    return new Grid();\n});\n\n","define('point',[\n    'vec2',\n    'canvas',\n    'utils'\n], function(\n    Vector2,\n    canvas,\n    utils\n) {\n    var ctx = canvas.ctx;\n\n    var Point = function(pos, hue) {\n        this.hue = hue;\n        this.fillStyle = utils.hsl(hue, 100, 50);\n        this.pos = pos;\n        this.radius = 3;\n\n        this.render = function() {\n            ctx.beginPath();\n            ctx.arc(this.pos.x, this.pos.y, this.radius, 0, Math.PI*2);\n            if (this.active || this.hovered) {\n                ctx.fillStyle = '#FFF';\n                ctx.fill();\n                ctx.strokeStyle = this.fillStyle;\n                ctx.strokeWidth = 1;\n                ctx.stroke();\n            } else {\n                ctx.fillStyle = this.fillStyle;\n                ctx.fill();\n            }\n        };\n\n        this.activate = function() {\n            this.active = true;\n        };\n\n        this.deactivate = function() {\n            this.active = false;\n        };\n\n        this.moveTo = function(pos) {\n            this.pos = pos.clone();\n        };\n\n        this.nudge = function(x, y) {\n            this.pos.x += x;\n            this.pos.y += y;\n        };\n    };\n\n    return Point;\n});\n\n","define('mouse',[\n    'vec2',\n    'canvas',\n    'utils'\n], function(\n    Vector2,\n    canvas,\n    utils\n) {\n    var ctx = canvas.ctx;\n\n    var Mouse = function() {\n        this.offset = new Vector2(canvas.el.offsetTop, canvas.el.offsetLeft);\n        this.pos = new Vector2();\n        this.centerPos = new Vector2();\n        this.clicks = [];\n        this.radius = 5;\n\n        this.update = function() {\n            canvas.setCursor('none');\n            this.strokeStyle = (this.hue)? utils.hsl(this.hue, 50, 50) : '#000';\n        };\n\n        this.render = function() {\n            if (! this.insideCanvas || canvas.cursor !== 'none') return;\n\n            ctx.save();\n\n            ctx.translate(this.pos.x - 0.5, this.pos.y - 0.5);\n\n            ctx.beginPath();\n            ctx.moveTo(-6, 0);\n            ctx.lineTo(-2, 0);\n            ctx.moveTo(2, 0);\n            ctx.lineTo(6, 0);\n            ctx.moveTo(0, -6);\n            ctx.lineTo(0, -2);\n            ctx.moveTo(0, 2);\n            ctx.lineTo(0, 6);\n\n            ctx.strokeStyle = this.strokeStyle;\n            ctx.stroke();\n\n            ctx.restore();\n        };\n\n        this.onDown = function(e) {\n            if (! this.insideCanvas) return;\n\n            this.updatePos(e.clientX, e.clientY);\n            this.snapToStart();\n\n            this.startPos = this.centerPos.clone();\n\n            this.clicks.push({\n                pos: this.pos.clone(),\n                centerPos: this.centerPos.clone()\n            });\n        };\n\n        this.onMove = function(e) {\n            this.updatePos(e.clientX, e.clientY);\n\n            if (this.startPos) {\n                this.dragPos = this.centerPos.clone();\n            }\n\n            this.snapToStart();\n        };\n\n        this.onUp = function(e) {\n            this.updatePos(e.clientX, e.clientY);\n\n            this.startPos = this.dragPos = null;\n\n            this.snapToStart();\n        };\n\n        this.onOver = function() {\n            this.insideCanvas = true;\n        };\n\n        this.onOut = function() {\n            this.insideCanvas = false;\n        };\n\n        this.updatePos = function(x, y) {\n            this.pos.reset(x, y).minusEq(this.offset);\n            this.centerPos = this.pos.clone().minusEq(canvas.half);\n            if (this.snapToGrid) {\n                this.centerPos.divideEq(10).round().multiplyEq(10);\n                this.pos = this.centerPos.clone().plusEq(canvas.half);\n            }\n        };\n\n        this.snapToStart = function() {\n            if (! this.insideCanvas || ! this.vectorStartPos) return;\n\n            if (this.centerPos.isCloseTo(this.vectorStartPos, 5)) {\n                this.centerPos = this.vectorStartPos.clone();\n                this.pos = this.centerPos.clone().plusEq(canvas.half);\n            }\n        };\n\n        this.toggleSnapToGrid = function() {\n            this.snapToGrid = !this.snapToGrid;\n        };\n\n        this.flush = function() {\n            this.clicks = [];\n        };\n\n        window.addEventListener('mousedown', this.onDown.bind(this));\n        window.addEventListener('mousemove', this.onMove.bind(this));\n        window.addEventListener('mouseup', this.onUp.bind(this));\n        canvas.el.addEventListener('mouseover', this.onOver.bind(this));\n        canvas.el.addEventListener('mouseout', this.onOut.bind(this));\n    };\n\n    return new Mouse();\n});\n\n","define('code',[\n    'vec2',\n    'utils'\n], function(\n    Vector2,\n    utils\n) {\n    var Code = function() {\n        this.el = utils.createEl('div', 'drawpath-code');\n        this.el.setAttribute(\"contentEditable\", true);\n\n        this.clear = function() {\n            this.lines = [];\n        };\n\n        this.addLine = function(line) {\n            this.lines.push(line || '');\n        };\n\n        this.render = function() {\n            this.code = this.lines.join('\\n<br>');\n\n            if (this.lastCode && this.lastCode == this.code) return;\n\n            this.el.innerHTML = this.code;\n            this.lastCode = this.code;\n        };\n\n        this.onClick = function(e) {\n            e.stopPropagation();\n        };\n\n        this.onFocus = function() {\n            setTimeout(function() {\n                var range = document.createRange();\n                range.selectNodeContents(this.el);\n                var sel = window.getSelection();\n                sel.removeAllRanges();\n                sel.addRange(range);\n            }.bind(this), 0);\n        };\n\n        this.el.addEventListener('click', this.onClick.bind(this));\n        this.el.addEventListener('focus', this.onFocus.bind(this));\n    };\n\n    return new Code();\n});\n\n","define('vector',[\n    'vec2',\n    'canvas',\n    'vectors',\n    'point',\n    'utils',\n    'mouse',\n    'code'\n], function(\n    Vector2,\n    canvas,\n    vectors,\n    Point,\n    utils,\n    mouse,\n    code\n) {\n    var ctx = canvas.ctx;\n\n    var Vector = function(pos, hue) {\n        this.list = [];\n        this.pos = pos;\n        this.hue = hue;\n        this.strokeStyle = utils.hsl(this.hue, 100, 50);\n\n        this.update = function() {\n            this.forEach(function(point) {\n                if ((point.isDragging && mouse.dragPos) || (mouse.startPos && mouse.startPos.isCloseTo(point.pos, 5))) {\n                    this.makeActive(point);\n                    point.isDragging = true;\n                    if (mouse.dragPos) point.moveTo(mouse.dragPos);\n                } else {\n                    point.isDragging = false;\n                }\n\n                point.hovered = false;\n                if (mouse.centerPos.isCloseTo(point.pos, 5)) {\n                    point.hovered = true;\n\n                    if ((!point.isFirst) || this.isClosed) canvas.setCursor('pointer');\n                }\n            }.bind(this));\n        };\n\n        this.render = function(withMouseLine) {\n            this.renderLines(withMouseLine);\n            if (withMouseLine) this.renderMouseLine();\n            if (mouse.insideCanvas) this.renderPoints();\n\n            return this.code;\n        };\n\n        this.renderLines = function(withMouseLine) {\n\n            this.forEach(function(point) {\n                if (point.isFirst) {\n                    ctx.beginPath();\n                    code.addLine('ctx.beginPath();');\n                    ctx.strokeStyle = this.strokeStyle;\n                    //code.addLine('ctx.strokeStyle = \\'' + this.strokeStyle + '\\';');\n                    ctx.moveTo(point.pos.x, point.pos.y);\n                    code.addLine('ctx.moveTo(' + point.pos.x + ', ' + point.pos.y + ');');\n                } else {\n                    ctx.lineTo(point.pos.x, point.pos.y);\n                    code.addLine('ctx.lineTo(' + point.pos.x + ', ' + point.pos.y + ');');\n                }\n\n            }.bind(this));\n\n            if (withMouseLine && !this.getLast().pos.isCloseTo(mouse.centerPos, 5)) {\n                code.addLine('ctx.lineTo(' + mouse.centerPos.x + ', ' + mouse.centerPos.y + ');');\n            }\n\n            if (this.isClosed) {\n                ctx.closePath();\n                code.addLine('ctx.closePath();');\n            }\n\n            ctx.stroke();\n            //code.addLine('ctx.stroke();');\n            code.addLine();\n        };\n\n        this.renderMouseLine = function() {\n            var lastPoint = this.getLast();\n            if (! lastPoint) return;\n\n            ctx.moveTo(lastPoint.pos.x, lastPoint.pos.y);\n            ctx.lineTo(mouse.centerPos.x, mouse.centerPos.y);\n            ctx.strokeStyle = utils.hsl(this.hue, 100, 75);\n            ctx.stroke();\n        };\n\n        this.renderPoints = function() {\n            this.forEach(function(point) {\n                point.render();\n            });\n        };\n\n        this.getFirst = function() {\n            return this.list[0];\n        };\n\n        this.getLast = function() {\n            if (! this.list.length) return;\n\n            return this.list[this.list.length - 1];\n        };\n\n        this.forEach = function(callback) {\n            if (typeof callback != 'function') return;\n            for (var i =0, len = this.list.length; i < len; i++) {\n                callback(this.list[i], i);\n            }\n        };\n\n        this.addPoint = function(pos) {\n            var point = new Point(pos, this.hue);\n            if (! this.list.length) point.isFirst = true;\n            this.list.push(point);\n            this.makeActive(point);\n            this.updateMouseStartPos();\n        };\n\n        this.closePath = function() {\n            this.isClosed = true;\n            if (this.active) this.active.deactivate();\n            this.updateMouseStartPos();\n        };\n\n        this.deactivate = function() {\n            if (this.active) this.active.deactivate();\n            this.active = null;\n        };\n\n        this.makeActive = function(point) {\n            if (vectors) vectors.makeActive(this);\n\n            if (this.active) this.active.deactivate();\n\n            this.active = point;\n            point.activate();\n            this.updateMouseStartPos();\n        };\n\n        this.updateMouseStartPos = function() {\n            if (this.isClosed) mouse.vectorStartPos = null;\n\n            mouse.vectorStartPos = this.list[0] && this.list[0].pos;\n        };\n    };\n\n    return Vector;\n});\n\n","define('vectors',[\n    'vec2',\n    'canvas',\n    'vector',\n    'mouse'\n], function(\n    Vector2,\n    canvas,\n    Vector,\n    mouse\n) {\n    var ctx = canvas.ctx;\n\n    var Vectors = function() {\n        this.list = [];\n        this.pos = new Vector2();\n\n        this.update = function() {\n            this.pos.reset(canvas.half.x - 0.5, canvas.half.y - 0.5);\n\n            this.forEach(function(vector){\n                vector.update();\n            });\n\n            if (canvas.cursor == 'none') {\n                mouse.clicks.forEach(function(c) {\n                    if (c.hasFired) return;\n\n                    var clickPos = c.centerPos.clone();\n                    var activeVector = this.active;\n\n                    if (activeVector) activeVector.deactivate();\n\n                    if (!activeVector || activeVector.isClosed) {\n                        activeVector = this.addVector(clickPos);\n                    }\n\n                    var firstPoint = activeVector.getFirst();\n\n                    if (firstPoint && firstPoint.pos.equals(clickPos)) {\n                        activeVector.closePath();\n                    } else {\n                        activeVector.addPoint(clickPos);\n                    }\n                }.bind(this));\n            }\n        };\n\n        this.render = function() {\n            ctx.save();\n            ctx.translate(this.pos.x, this.pos.y);\n\n            this.forEach(function(vector){\n                var withMouseLine = (canvas.cursor == 'none' && vector.active && mouse.insideCanvas && !vector.isClosed);\n                vector.render(withMouseLine);\n            }.bind(this));\n\n\n            ctx.restore();\n        };\n\n        this.getFirst = function() {\n            return this.list[0];\n        };\n\n        this.getLast = function() {\n            if (! this.list.length) return;\n\n            return this.list[this.list.length - 1];\n        };\n\n        this.forEach = function(callback) {\n            if (typeof callback != 'function') return;\n            for (var i =0, len = this.list.length; i < len; i++) {\n                callback(this.list[i], i);\n            }\n        };\n\n        this.addVector = function(pos) {\n            var hue = this.list.length * 100;\n            var vector = new Vector(pos, hue);\n            this.list.push(vector);\n            this.makeActive(vector);\n\n            return vector;\n        };\n\n        this.nudgeActivePoint = function(x, y) {\n            if (! this.active || ! this.active.active) return;\n\n            this.active.active.nudge(x, y);\n        };\n\n        this.makeActive = function(vector){\n            if (this.active) this.active.deactivate();\n            mouse.hue = vector.hue;\n\n            this.active = vector;\n        };\n    };\n\n    return new Vectors();\n});\n\n","define('keyboard',[\n    'mouse',\n    'vectors'\n], function(\n    mouse,\n    vectors\n) {\n    var Keyboard = function() {\n        this.key = {\n            UP: 38,\n            LEFT: 37,\n            RIGHT: 39,\n            DOWN: 40,\n            S: 83,\n            PLUS: 187,\n            MINUS: 189\n        };\n\n        this.onKeydown = function(e) {\n            var nudgeAmount = e.shiftKey? 10 : 1;\n\n            switch (e.keyCode) {\n                case this.key.UP:\n                    vectors.nudgeActivePoint(0, -nudgeAmount);\n                    break;\n                case this.key.DOWN:\n                    vectors.nudgeActivePoint(0, nudgeAmount);\n                    break;\n                case this.key.LEFT:\n                    vectors.nudgeActivePoint(-nudgeAmount, 0);\n                    break;\n                case this.key.RIGHT:\n                    vectors.nudgeActivePoint(nudgeAmount, 0);\n                    break;\n                case this.key.S:\n                    mouse.toggleSnapToGrid();\n                    break;\n            }\n        };\n\n        window.addEventListener('keydown', this.onKeydown.bind(this));\n    };\n\n    return new Keyboard();\n});\n\n","define('controls',[\n    'vec2',\n    'canvas',\n    'mouse',\n    'utils'\n], function(\n    Vector2,\n    canvas,\n    mouse,\n    utils\n) {\n    var ctx = canvas.ctx;\n\n    var Controls = function() {\n        this.buttons = [];\n\n        this.buttons.push(new Button({\n            name: 'snapToGrid',\n            icon: function() {\n                ctx.beginPath();\n                ctx.moveTo(7, 3);\n                ctx.lineTo(7, 17);\n                ctx.moveTo(13, 3);\n                ctx.lineTo(13, 17);\n                ctx.moveTo(3, 7);\n                ctx.lineTo(17, 7);\n                ctx.moveTo(3, 13);\n                ctx.lineTo(17, 13);\n            },\n            checkActive: function() {\n                this.active = mouse.snapToGrid;\n            },\n            onClick: function() {\n                mouse.snapToGrid = !mouse.snapToGrid;\n            },\n            x: 10,\n            y: 10\n        }));\n\n        this.update = function() {\n            this.hovered = null;\n            this.buttons.forEach(function(button) {\n                button.update();\n                if (button.hovered) this.hovered = button;\n            }.bind(this));\n        };\n\n        this.render = function() {\n            this.buttons.forEach(function(button) {\n                if (! button.hovered) button.render();\n            });\n\n            if (this.hovered) this.hovered.render();\n        };\n    };\n\n    var Button = function(params) {\n        this.pos = new Vector2(params.x, params.y);\n        this.icon = params.icon;\n        this.checkActive = params.checkActive;\n        this.onClick = params.onClick;\n        this.fillIcon = params.fillIcon;\n        this.size = 26;\n\n        this.update = function() {\n            if (this.checkActive) this.checkActive();\n\n            this.hovered = utils.withinRect(mouse.pos, this.pos, this.size, this.size);\n\n            if (this.hovered) {\n                canvas.setCursor('pointer');\n            }\n\n            mouse.clicks.forEach(function(click) {\n                if (! click.hasFired && utils.withinRect(click.pos, this.pos, this.size, this.size)) {\n                    this.onClick();\n                    click.hasFired = true;\n                }\n            }.bind(this));\n        };\n\n        this.render = function() {\n            ctx.save();\n            ctx.translate(this.pos.x - 0.5, this.pos.y - 0.5);\n\n            ctx.beginPath();\n            ctx.rect(2, 2, this.size, this.size);\n            ctx.fillStyle = 'rgba(0,0,0,0.1';\n            ctx.fill();\n\n            ctx.beginPath();\n            ctx.rect(0, 0, this.size, this.size);\n            ctx.fillStyle = this.active? '#EEE' : '#FFF';\n            ctx.fill();\n            ctx.strokeStyle = (this.hovered)? '#AAA' : '#CCC';\n            ctx.lineWidth = 1;\n            ctx.stroke();\n\n            ctx.translate(3, 3);\n            if (this.icon) this.icon();\n\n            ctx.strokeStyle = 'rgba(0, 0, 0, 0.5)';\n            ctx.stroke();\n\n            ctx.restore();\n        };\n    };\n\n    return new Controls();\n});\n\n","require([\n    'config',\n    'canvas',\n    'grid',\n    'vectors',\n    'mouse',\n    'keyboard',\n    'code',\n    'controls'\n],function(\n    config,\n    canvas,\n    grid,\n    vectors,\n    mouse,\n    keyboard,\n    code,\n    controls\n){\n    var loop = function() {\n        canvas.clear();\n        code.clear();\n\n        mouse.update();\n        grid.update();\n        controls.update();\n        vectors.update();\n\n        grid.render();\n        vectors.render();\n        code.render();\n        controls.render();\n        mouse.render();\n\n        canvas.updateCursor();\n        mouse.flush();\n\n        setTimeout(loop, 1000 / config.fps);\n    };\n\n    loop();\n});\n\ndefine(\"drawpath\", function(){});\n\n"]}